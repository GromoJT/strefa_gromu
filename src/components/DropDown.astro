---

import Link from './Link.astro';
interface Props{
    text: string;
    elements:any;
    classes?: string;
    message:string
}
const {
    text,
    elements,
    classes,
    message,
    ...rest
 } = Astro.props as Props;

import DropDownArrow from '../icons/downArrow.svg'
---
<astro-drop-down data-message={message}>
<button id={"navDropDown_"+message.toLowerCase()} class="link primary dropdownBtn" >
{text}
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 32 32">
	<path fill="white" d="M8.037 11.166L14.5 22.36c.825 1.43 2.175 1.43 3 0l6.463-11.195c.826-1.43.15-2.598-1.5-2.598H9.537c-1.65 0-2.326 1.17-1.5 2.6z" />
</svg>
</button>
<div id={"dropContent_"+message.toLowerCase()} class="dropdown-content">
    {
        elements.map( (e: { path: string; name: string; }) => (
        <Link 
            href={e.path} 
            text={e.name} 
            style="primary" 
            isFilled={false}
            borderVisible={false}
            data-navLink
            />
        ))
    }
</div>
</astro-drop-down>
<script>
    class AstroDropDown extends HTMLElement {
        constructor(){
            super();
            const name= this.dataset.message;
            
            const btn = document.getElementById("navDropDown_"+ name?.toLocaleLowerCase())


            const dropContent = document.getElementById("dropContent_"+name?.toLowerCase())

            btn?.addEventListener('click',() => {
                dropContent?.classList.toggle("show");
                console.log(name)
            })

            window.onclick = (e) =>{
                if(e == null) return;

            }
                }
    }
    
    customElements.define('astro-drop-down',AstroDropDown);
    
</script>
